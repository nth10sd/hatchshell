# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 11 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    # runs-on: ${{ matrix.operating-system }}
    # Fixate to exact operating system versions to avoid potential test failures over time
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # Uncomment this line if we are running on multiple operating systems
        # operating-system: [ubuntu-20.04, macos-10.15, windows-2019]
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # pip cache dependencies to save time
    - uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    # When activating macOS, verify pip cache dir at https://github.com/actions/cache/blob/main/examples.md
    # - uses: actions/cache@v2
    #   if: startsWith(runner.os, 'macOS')
    #   with:
    #     path: ~/Library/Caches/pip
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    # When activating Windows, verify pip cache dir at https://github.com/actions/cache/blob/main/examples.md
    # - uses: actions/cache@v2
    #   if: startsWith(runner.os, 'Windows')
    #   with:
    #     path: ~\AppData\Local\pip\Cache
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install OS prerequisites
      run: sudo apt-get install ripgrep
    - name: Search for existing linter ignore lines and lines importing the Any type
      run: |
        rg -t py --stats "(?:(?:flake8|noqa|pylint|type): *(?:disable|ignore|noqa)| Any)" $(sed -n 's/name *= *"\(.*\)",/\1/p' < setup.py) || true

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -u -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then python -u -m pip install -r requirements.txt; fi

    - name: Run with flake8 only checking for Python syntax errors or undefined names
      run: |
        # stop the build if there are Python syntax errors or undefined names
        python -u -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Run with flake8, mypy and pylint, and also non-slow tests, using pytest and under code coverage
      run: |
        python -u -m pytest --flake8 --mypy --pylint -m "not slow" \
          --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=80

    # - name: Check versions
    #   run: |
    #     gcc --version
    #     g++ --version
    #     clang --version
    #     clang++ --version
    #     hg --version
    #     llvm-symbolizer --version || true  # Ignore exit code if llvm-symbolizer does not exist
    #     which llvm-config || true  # Find out location of llvm-config
    #     export LLVM_CONFIG=/usr/local/clang-9.0.1/bin/llvm-config  # From llvm-config location
    #     llvm-config --version || true  # Ignore exit code if llvm-config does not exist
    #     /usr/bin/llvm-config --version || true  # Ignore exit code if llvm-config does not exist

    # - name: Install project prerequisites
    #   run: |
    #     # expect-dev is for unbuffer, not needed for now
    #     sudo apt-get install gdb
    # - name: Install SpiderMonkey prerequisites
    #   run: |
    #     # lib32z1 is for 32-bit builds, not needed for now
    #     sudo apt-get install autoconf2.13

    # - name: Install latest version of Rust via rustup
    #   run: |
    #     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
    #     source $HOME/.cargo/env
    #     rustup update stable
    #     which rustup
    #     rustup --version
    #     which rustc
    #     rustc --version

    # - name: Set project cache folder environment variable
    #   run: |
    #     echo ::set-env name=MC_HG_REPO_PATH::$HOME/.cache/${{ github.event.repository.name }}
    # - name: Create project cache folder
    #   run: |
    #     mkdir -p "$MC_HG_REPO_PATH"
    # - name: Clone Mercurial mozilla-central repo as a stream
    #   run: |
    #     date
    #     time hg clone --stream https://hg.mozilla.org/mozilla-central/ $MC_HG_REPO_PATH/mozilla-central/
    #     date

    # prerequisite and m-c verification should be a fast compile test, and actual compilation a slow compile test
    # Commented out as there are currently no slow tests
    # - name: Run only slow tests, using pytest
    #   run: |
    #     python -u -m pytest -m "slow"

    # - name: Upload coverage report to codecov
    #   if: ${{ success() }}
    #   run: bash <(curl -s https://codecov.io/bash)
